Constructor Injection :

public class DogsService {

private DogsDao dao;
 @Autowired
    public void DogsService(DogsDao dao) {
        System.out.println("DogsService setter called");
        this.dao = dao;
    }


}

Setter Injection :

private DogsDao dao;

 @Autowired
    public void setDao(DogsDao dao) {
        System.out.println("DogsService setter called");
        this.dao = dao;
    }



@Autowired is annotated for constructor in constructor injection and on setter for setter injection.


Constructor Injection  Vs  Setter Injection ?
Spring have advocated  to Use Constructor injection over setter injection

Constructor Injection for Mandatory Dependencies
Setter Injection for Optional Dependencies

A class that takes a required dependency as a constructor argument can only be instantiated if that argument is provided
(you should have a guard clause to make sure the argument is not null.) A constructor therefore enforces the dependency requirement
 whether or not you're using Spring, making it container-agnostic.

If you use setter injection, the setter may or may not be called, so the instance may never be provided with its dependency.
The only way to force the setter to be called is using @Required or @Autowired , which is specific to Spring and is therefore
not container-agnostic.


While using Constructorinjection , you can Get CircularBeanCreationException , how to resolve?
Use @Lazy , or setter injection.